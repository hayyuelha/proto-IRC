package ProtoChatServer.ChatServer;

import io.grpc.chatservice.*;
import io.grpc.Server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * Hello world!
 *
 */
public class App 
{
	private static final Logger logger = Logger.getLogger(App.class.getName());

	private final int port = 8000;
	private Server server;
	
	/** Start serving requests. */
	public void start() throws IOException {
	    // TODO implement start server
	}
	
    protected void stop() {
		// TODO Auto-generated method stub
		
	}

	public static void main( String[] args )
    {
        System.out.println( "Hello World!" );
    }
	
	public static class Channels {
		private List<Channel> channels;
		
		public Channels() {
			channels = new ArrayList<Channel>();
		}
		
		public void addChannel(Channel channel) {
			channels.add(channel);
		}
		
		public void removeChannel(Channel channel) {
			channels.remove(channel);
		}
		
		//Check whether channel with certain name is exist
		public boolean isExist(String channelName) {
			boolean ret = false;
			int i = 0;
			while (!ret && i < channels.size()) {
				if (channels.get(i).getChannelName().equals(channelName))
					ret = true;
				i++;
			}
			return ret;
		}
		
		//Get channel instance by channelName
		public Channel getChannel(String channelName) {
			Channel chInstance = new Channel();
			boolean ret = false;
			int i = 0;
			while (!ret && i < channels.size()) {
				if (channels.get(i).getChannelName().equals(channelName)) {
					ret = true;
					chInstance = channels.get(i);
				}
				i++;
			}
			return chInstance;
		}
		
		public void removeUser(User user) {
			for (Channel c : channels) {
				c.removeMember(user);
			}
		}
		
		public void addMessage(Message m) {
			for (Channel c : channels) {
				c.addMessage(m);
			}
		}
		
		public List<Channel> getListChannels() {
			return this.channels;
		}
	}
	
	public static class Users {
		private List<User> users;
		
		public Users() {
			users = new ArrayList<User>();
		}
		
		public void addUser(User user) {
			users.add(user);
		}
		
		public void removeUser(User user) {
			users.remove(user);
		}
		
		//Get user instance by clientKey
		public User getUser(String clientKey) {
			User usr = new User();
			boolean ret = false;
			int i = 0;
			while (!ret && i < users.size()) {
				if (users.get(i).getClientKey().equals(clientKey)) {
					ret = true;
					usr = users.get(i);
				}
				i++;
			}
			return usr;
		}
		
		public List<User> getListUsers() {
			return this.users;
		}
	}
}
